import unittest
from src import notation


class TestCalc(unittest.TestCase):

    def test_polsky(self):
        self.assertEqual(notation.transformation(['1', '+', '2', '+', '3']), ['1', '2', '+', '3', '+'])
        self.assertEqual(notation.transformation(['(', '1', '+', '2', ')', '*', '4', '+', '3']),
                         ['1', '2', '+', '4', '*', '3', '+'])
        self.assertEqual(
            notation.transformation(['(', '1', '+', '5', ')', '*', '4', '+', '(', '2', '-', '4', ')', '*', '3']),
            ['1', '5', '+', '4', '*', '2', '4', '-', '3', '*', '+'])
        self.assertEqual((notation.transformation(['(', '(', '3', '+', '2', ')', '*', '3', '+', '5', '-', '3', ')', '*', '4', '+', '2'])),
                         ['3', '2', '+', '3', '*', '5', '+', '3', '-', '4', '*', '2', '+'])
        self.assertEqual(notation.transformation(
            ['(', '4', '+', '(', '3', '+', '2', ')', '*', '3', '+', '5', '-', '3', ')', '*', '4', '+', '2']),
            ['4', '3', '2', '+', '3', '*', '+', '5', '+', '3', '-', '4', '*', '2', '+'])
        self.assertEqual(notation.transformation(
            ['(', '4', '+', '(', '3', '+', '2', ')', '*', '3', '+', '5', '-', '3', ')', '/', '4', '+', '2']),
            ['4', '3', '2', '+', '3', '*', '+', '5', '+', '3', '-', '4', '/', '2', '+'])
        self.assertEqual(notation.transformation(
            ['(', '4', '+', '(', '3', '+', '2', ')', '*', '3', '+', '5', '-', '3', ')', '/','(', '4', '+', '2',')']),
            ['4', '3', '2', '+', '3', '*', '+', '5', '+', '3', '-', '4', '2', '+', '/'])


TestCalc()
